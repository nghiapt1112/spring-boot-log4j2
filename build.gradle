buildscript {
    ext {
        springBootVersion = '2.0.4.RELEASE'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}


allprojects {
//có 2 cách để excelude sử dụng ConfigurationContainer :
//1 là configurations.all { // bên trong đây không có chữ }runtime
//2 là cách bên dưới

    configurations.all {
//    runtime.exclude group: 'org.springframework.boot', module: 'spring-boot-starter-tomcat'
        exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
        exclude group: 'org.springframework.boot', module: 'logback-classic'
    }

    repositories {
        mavenCentral()
        mavenLocal()
        maven { url "https://repo.spring.io/milestone" }
    }

    tasks.withType(Jar) {
        destinationDir = file("$rootDir/build/")
    }
    version = '1.0'

    tasks.withType(JavaExec) {
        if (System.getProperty('debug', '0') == '1') {
            jvmArgs '-Xdebug', '-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=5005'
        }
    }
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'idea'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

dependencies {
//  Lombok
//    compileOnly 'org.projectlombok:lombok:1.18.6'
//    annotationProcessor 'org.projectlombok:lombok:1.18.6'

    implementation('org.springframework.boot:spring-boot-starter-web')
//  Commons utils
    implementation('org.apache.commons:commons-lang3:3.8.1')
    implementation("org.apache.commons:commons-collections4:4.1")
    implementation("commons-io:commons-io:2.6")

    implementation("org.springframework.boot:spring-boot-devtools")
    testCompile('org.springframework.boot:spring-boot-starter-test')
}

}
